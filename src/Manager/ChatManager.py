import google.generativeai as genai
from .ConfigManager import ConfigManager


class ChatManager:
    """
    A singleton class for managing chat sessions with the Gemini AI.
    """

    _instance = None

    def __new__(cls):
        """
        Singleton creation method to ensure only one instance of ChatManager exists.
        """
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.initialize()
        return cls._instance

    def initialize(self):
        """
        Initialize the ChatManager instance with API key and settings.
        """
        self.api_key = ConfigManager.get_geminiAi_key()
        genai.configure(api_key=self.api_key)
        self.gemini_settings = ConfigManager.get_gemini_settings()
        self.chat_session = None

    @staticmethod
    async def ask_gemini_ai(prompt: str):
        """
        Asynchronously sends a prompt to the Gemini AI model and retrieves the response.

        Args:
            prompt (str): The prompt text to send to the model.

        Returns:
            str: The response text from the model.
        """
        try:
            chat_manager = ChatManager()
            if not chat_manager.chat_session:
                model = chat_manager._create_gemini_model(chat_manager)
                chat_manager.chat_session = model.start_chat(history=[])
            response = chat_manager.chat_session.send_message(prompt)
            return response.text
        except Exception as e:
            return f"Error: {e}"

    @staticmethod
    async def generate_response_with_image_and_text(image_data, text=None):
        """
        Asynchronously generates a response based on an image and optional text.

        Args:
            image_data (bytes): The binary image data.
            text (str, optional): Additional text context for the image. Defaults to None.

        Returns:
            str: The response text generated by the model.
        """
        try:
            chat_manager = ChatManager()
            image_model = ChatManager._create_image_gemini_model(chat_manager)
            response = image_model.generate_content(
                ChatManager._create_prompt_parts(image_data, text)
            )
            if response._error:
                return "‚ùå" + str(response._error)
            return response.text
        except Exception as e:
            return f"Error: {e}"

    @staticmethod
    def delete_data():
        """
        Delete chat history and reset data.
        """
        chat_manager = ChatManager()
        if chat_manager.chat_session:
            chat_manager.chat_session = None

    @staticmethod
    def _create_gemini_model(chat_manager):
        """
        Create and return a Gemini AI model for text-based conversation.
        """
        return genai.GenerativeModel(
            model_name="gemini-1.5-pro-latest",
            safety_settings=chat_manager.gemini_settings.get("safety_settings"),
            generation_config=chat_manager.gemini_settings.get("generation_config"),
        )

    @staticmethod
    def _create_image_gemini_model(chat_manager):
        """
        Create and return a Gemini AI model for image-based conversation.
        """
        return genai.GenerativeModel(
            model_name="gemini-1.5-flash-latest",
            safety_settings=chat_manager.gemini_settings.get("safety_settings"),
            generation_config=chat_manager.gemini_settings.get("generation_config"),
        )

    @staticmethod
    def _create_prompt_parts(image_data, text):
        """
        Create and return parts of the prompt for generating a response with image and optional text.
        """
        image_parts = [{"mime_type": "image/jpeg", "data": image_data}]
        prompt_text = text if text else "What is this a picture of?"
        prompt_parts = [image_parts[0], f"\n{prompt_text}"]
        return prompt_parts
