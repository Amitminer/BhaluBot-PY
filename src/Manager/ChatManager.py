from .ConfigManager import ConfigManager
import google.generativeai as genai
from typing import Optional

class ChatManager:
    """
    A singleton class for managing chat sessions with Gemini AI.
    Handles fine-tuning prompts, sending messages, and managing session state.
    """

    _instance = None
    fine_tuned = False

    def __new__(cls):
        """
        Singleton creation method to ensure only one instance of ChatManager exists.
        """
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.initialize()
        return cls._instance

    def initialize(self):
        """
        Initialize the ChatManager instance with the necessary API key and settings.
        """
        self.api_key = ConfigManager.get_geminiAi_key()
        self.model_id = ConfigManager.get_gemini_model_id()
        if not self.api_key:
            raise ValueError("Gemini AI API key not found in configuration.")
        genai.configure(api_key=self.api_key)

        # Load generation and safety settings from configuration
        self.settings = ConfigManager.get_gemini_settings()
        self.chat_session = None

    @staticmethod
    async def ask_gemini_ai(prompt: str) -> str:
        """
        Asynchronously sends a prompt to Gemini AI and retrieves the response.

        Args:
            prompt (str): The prompt text to send to the model.

        Returns:
            str: The response text from the model.
        """
        try:
            chat_manager = ChatManager()
            chat_manager._ensure_chat_session()
            chat_manager._apply_finetuning()

            response = chat_manager.chat_session.send_message(prompt)
            return response.text
        except Exception as e:
            return f"Error while communicating with Gemini AI: {e}"

    @staticmethod
    async def generate_response_with_image_and_text(image_data: bytes, text: Optional[str] = None) -> str:
        """
        Asynchronously generates a response based on an image and optional text.

        Args:
            image_data (bytes): The binary image data.
            text (str, optional): Additional text context for the image.

        Returns:
            str: The response text generated by the model.
        """
        try:
            chat_manager = ChatManager()
            prompt_parts = chat_manager._create_prompt_parts(image_data, text)
            chat_manager._ensure_chat_session()

            response = chat_manager.chat_session.send_message(prompt_parts)
            return response.text
        except Exception as e:
            return f"Error while generating response with image and text: {e}"

    def _ensure_chat_session(self):
        """
        Ensures that the chat session is initialized.
        If not, it creates a new session.
        """
        if not self.chat_session:
            model = self._create_model()
            self.chat_session = model.start_chat(history=[])

    def _apply_finetuning(self):
        """
        Applies fine-tuning by sending pre-configured prompts to the chat session.
        This is done only once per session.
        """
        if not self.fine_tuned:
            fine_tuned_prompts = ConfigManager.get_finetune_prompt()
            for ft_prompt in fine_tuned_prompts:
                self.chat_session.send_message(ft_prompt)
            self.fine_tuned = True
            print("Fine-tuned prompts applied.")

    @staticmethod
    def delete_data():
        """
        Resets the chat session and clears any history.
        """
        chat_manager = ChatManager()
        chat_manager.chat_session = None

    def _create_model(self):
        """
        Creates and returns a Generative AI model using the configured settings.

        Returns:
            genai.GenerativeModel: The configured Generative AI model.
        """
        return genai.GenerativeModel(
            model_name=self.model_id,
            safety_settings=self.settings.get("safety_settings"),
            generation_config=self.settings.get("generation_config"),
        )

    @staticmethod
    def _create_prompt_parts(image_data: bytes, text: Optional[str]) -> list:
        """
        Creates a list of prompt parts for generating a response with an image and optional text.

        Args:
            image_data (bytes): The binary image data.
            text (str, optional): Additional text context for the image.

        Returns:
            list: A list containing the image data and text for the prompt.
        """
        image_part = {"mime_type": "image/jpeg", "data": image_data}
        prompt_text = text or "What is this a picture of?"
        return [image_part, f"\n{prompt_text}"]
